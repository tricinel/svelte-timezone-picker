{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Demo.svelte",
    "../../Picker.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Picker from '../src/Picker.svelte';\n  import { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\n  import { format, parseISO } from 'date-fns';\n\n  let datetime = '2018-08-23T10:00';\n  let datetime1 = '2018-08-23T10:00';\n  let timezone = 'Europe/London';\n  // let datetime;\n  // let timezone;\n\n  let payload = {};\n\n  let datetime2 = '2016-06-19T08:30';\n\n  const switchDatetime = () => {\n    if (datetime === datetime1) {\n      datetime = datetime2;\n    } else {\n      datetime = datetime1;\n    }\n  };\n\n  const update = (ev) => {\n    payload.datetime = ev.detail.datetime;\n    payload.timezone = ev.detail.timezone;\n    payload.utcDatetime = ev.detail.utcDatetime;\n    payload.zonedDatetime = ev.detail.zonedDatetime;\n  };\n</script>\n\n<div class=\"cols\">\n  <div class=\"col\">\n    <p>Somewhere in user land...</p>\n    <p>\n      <button on:click=\"{switchDatetime}\">Simulate datetime change</button>\n    </p>\n    <input type=\"datetime-local\" bind:value=\"{datetime}\" />\n    <Picker on:update=\"{update}\" {datetime} {timezone} expanded=\"{true}\" />\n  </div>\n  {#if Object.keys(payload).length}\n    <div class=\"col\">\n      <p>The payload for the server will be:</p>\n      <pre>{JSON.stringify(payload, null, 2)}</pre>\n      <p>\n        It will be {format(payload.zonedDatetime, \"MMMM do, yyyy 'at' HH:mm aaaa\")}\n        in {payload.timezone}.\n      </p>\n      <p>UTC: {format(payload.utcDatetime, \"MMMM do, yyyy 'at' HH:mm aaaa\")}</p>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .cols {\n    background: #fafafa;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    display: flex;\n    margin: 2em 0;\n  }\n\n  .col {\n    padding: 1em;\n  }\n\n  p {\n    color: #9c9c9c;\n    font-size: 0.8em;\n  }\n\n  pre {\n    background: #fff;\n    border: 1px solid #ccc;\n    border-radius: 2px;\n    padding: 0.4em;\n  }\n\n  input {\n    margin: 0.4em 0 2em;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  import { slide } from 'svelte/transition';\n  import { utcToZonedTime, zonedTimeToUtc, format } from 'date-fns-tz';\n  import { isValid, parseISO } from 'date-fns';\n  import groupedZones from './timezones';\n  import {\n    scrollIntoView,\n    uid,\n    getKeyByValue,\n    slugify,\n    keyCodes,\n    ungroupZones,\n    filterZones,\n    pickZones\n  } from './utils';\n\n  // ***** Public API *****\n\n  // The datetime and timezone values come from the consumer of the component\n  // If either is not provided, we will set them in onMount to be the current date and the user's timezone\n  export let datetime = null;\n  export let timezone = null;\n\n  // Should the dropdown be expanded by default?\n  export let expanded = false;\n\n  // We can allow the user to filter the timezones displayed to only a few\n  export let allowedTimezones = null;\n\n  // ***** End Public API *****\n\n  // We will use the dispatcher to send the update event\n  const dispatch = createEventDispatcher();\n\n  // What is the current zone?\n  let currentZone;\n\n  // We will always convert the datetime to UTC\n  let utcDatetime;\n\n  // We keep track of what the user is typing in the search box\n  let userSearch;\n\n  // What is the currently selected zone in the dropdown?\n  let highlightedZone;\n\n  // DOM nodes refs\n  let toggleButtonRef;\n  let searchInputRef;\n  let clearButtonRef;\n  let listBoxRef;\n  let listBoxOptionRefs;\n\n  // A few IDs that will we use for a11y\n  const labelId = uid();\n  const listBoxId = uid();\n  const searchInputId = uid();\n\n  const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone; // eslint-disable-line new-cap\n  let availableZones;\n\n  if (allowedTimezones) {\n    if (Array.isArray(allowedTimezones)) {\n      availableZones = pickZones(groupedZones, [\n        ...allowedTimezones,\n        userTimezone\n      ]);\n    } else {\n      console.error(\n        'You need to provide a list of timezones as an Array!',\n        `You provided ${allowedTimezones}.`\n      );\n      availableZones = groupedZones;\n    }\n  } else {\n    availableZones = groupedZones;\n  }\n\n  const ungroupedZones = ungroupZones(availableZones);\n\n  // We take the ungroupedZones and create a list of just the user-visible lables\n  // e.g. {'London': 'Europe/London', 'Berlin': 'Europe/Berlin' } => ['London', 'Berlin']\n  const zoneLabels = Object.keys(ungroupedZones);\n\n  // We also want a list of all the valid zones\n  // e.g. {'London': 'Europe/London', 'Berlin': 'Europe/Berlin' } => ['Europe/London', 'Europe/Berlin']\n  const validZones = Object.values(ungroupedZones);\n\n  // Zones will be filtered as the user types, so we keep track of them internally here\n  let filteredZones = [];\n\n  listBoxOptionRefs = zoneLabels.map((zone) => ({ [zone]: null }));\n\n  // We keep track of the initial state so we can reset to these values when needed\n  const initialState = {\n    expanded,\n    userSearch: null\n  };\n\n  // Reset the dropdown and all internal state to the initial values\n  const reset = () => {\n    expanded = initialState.expanded; // eslint-disable-line prefer-destructuring\n    userSearch = initialState.userSearch; // eslint-disable-line prefer-destructuring\n  };\n\n  const dispatchUpdates = () => {\n    dispatch('update', {\n      timezone,\n      datetime,\n      utcDatetime,\n      zonedDatetime: utcToZonedTime(utcDatetime, timezone)\n    });\n  };\n\n  // Emit the event back to the consumer\n  const handleTimezoneUpdate = (ev, zoneId) => {\n    currentZone = zoneId;\n    timezone = ungroupedZones[zoneId];\n    dispatchUpdates();\n    reset();\n    toggleButtonRef.focus();\n    ev.preventDefault();\n  };\n\n  // ***** Methods *****\n\n  // Given a Date and a timezone, give the correct Date and Time for that timezone\n  const getTimeForZone = (d, t) => utcToZonedTime(d, t);\n\n  // Figure out if a grouped zone has any currently visible zones\n  // We use this when the user searches in order to show/hide the group name in the list\n  const groupHasVisibleChildren = (group, zones) =>\n    Object.keys(groupedZones[group]).some((zone) => zones.includes(zone));\n\n  // Scroll the list to a specific element in it if that element is not already visible on screen\n  const scrollList = (zone) => {\n    const zoneElementRef = listBoxOptionRefs[zone];\n    if (listBoxRef && zoneElementRef) {\n      scrollIntoView(zoneElementRef, listBoxRef);\n      zoneElementRef.focus({ preventScroll: true });\n    }\n  };\n\n  // Every time the user uses their keyboard to move up or down in the list,\n  // we need to figure out if their at the end/start of the list and scroll the correct elements\n  // into view\n  const moveSelection = (direction) => {\n    const len = filteredZones.length;\n    const zoneIndex = filteredZones.findIndex(\n      (zone) => zone === highlightedZone\n    );\n\n    let index;\n\n    if (direction === 'up') {\n      index = (zoneIndex - 1 + len) % len;\n    }\n\n    if (direction === 'down') {\n      index = (zoneIndex + 1) % len;\n    }\n\n    // We update the highlightedZone to be the one the user is currently on\n    highlightedZone = filteredZones[index];\n    console.log(highlightedZone);\n    // We make sure the highlightedZone is visible on screen, scrolling it into view if not\n    scrollList(highlightedZone);\n  };\n\n  // We watch for when the user presses Escape, ArrowDown or ArrowUp and react accordingly\n  const keyDown = (ev) => {\n    // If the clearButton is focused, don't do anything else\n    // We should only continue if the dropdown is expanded\n    if (document.activeElement === clearButtonRef || !expanded) {\n      return;\n    }\n\n    // If the user presses Escape, we dismiss the drodpown\n    if (ev.keyCode === keyCodes.Escape) {\n      reset();\n    }\n\n    // If the user presses the down arrow, start navigating the list\n    if (ev.keyCode === keyCodes.ArrowDown) {\n      ev.preventDefault();\n      moveSelection('down');\n    }\n    // If the user presses the up arrow, start navigating the list\n    if (ev.keyCode === keyCodes.ArrowUp) {\n      ev.preventDefault();\n      moveSelection('up');\n    }\n    // If the user presses Enter and the dropdown is expanded, select the current item\n    if (ev.keyCode === keyCodes.Enter && highlightedZone) {\n      handleTimezoneUpdate(ev, highlightedZone);\n    }\n    // If the user start to type letters or numbers, we focus on the Search field\n    if (\n      keyCodes.Characters.includes(ev.keyCode) ||\n      ev.keyCode === keyCodes.Backspace\n    ) {\n      searchInputRef.focus();\n    }\n  };\n\n  // When the user presses the clear button when searching,\n  // we want to clear the text and refocus on the input\n  const clearSearch = () => {\n    userSearch = initialState.userSearch; // eslint-disable-line prefer-destructuring\n    // Refocus to the search input\n    searchInputRef.focus();\n  };\n\n  const setHighlightedZone = (zone) => {\n    highlightedZone = zone;\n  };\n\n  const toggleExpanded = (ev) => {\n    if (ev.keyCode) {\n      // If it's a keyboard event, we should react only to certain keys\n      // Enter and Space should show it\n      if ([keyCodes.Enter, keyCodes.Space].includes(ev.keyCode)) {\n        expanded = !expanded;\n      }\n      // Escape should just hide the menu\n      if (ev.keyCode === keyCodes.Escape) {\n        expanded = false;\n      }\n      // ArrowDown should show it\n      if (ev.keyCode === keyCodes.ArrowDown) {\n        expanded = true;\n      }\n    } else {\n      // If there is no keyCode, it's not a keyboard event\n      expanded = !expanded;\n    }\n  };\n\n  const scrollToHighlighted = () => {\n    if (expanded && highlightedZone) {\n      scrollList(highlightedZone);\n    }\n  };\n\n  // ***** Reactive *****\n\n  // As the user types, we filter the available zones to show only those that should be visible\n  $: filteredZones =\n    userSearch && userSearch.length > 0\n      ? filterZones(userSearch, zoneLabels)\n      : zoneLabels.slice();\n\n  const setTimezone = (tz) => {\n    if (!tz) {\n      timezone = userTimezone;\n    }\n\n    if (tz && !Object.values(ungroupedZones).includes(tz)) {\n      // The timezone must be a valid timezone, so we check it against our list of values in flat\n      console.warn(\n        `The timezone provided is not valid: ${tz}!`,\n        `Valid zones are: ${validZones}`\n      );\n      timezone = userTimezone;\n    }\n\n    currentZone = getKeyByValue(ungroupedZones, timezone);\n    setHighlightedZone(currentZone);\n  };\n\n  const setDatetime = (dt, tz) => {\n    // Warn the user if the datetime is invalid\n    if (dt && !isValid(parseISO(dt))) {\n      console.warn(`The datetime provided is not a valid date: ${dt}`);\n    }\n\n    // If there is a valid datetime, update the utcDatetime\n    if (dt && isValid(parseISO(dt))) {\n      utcDatetime = zonedTimeToUtc(parseISO(dt), tz);\n    }\n  };\n\n  // We want to properly handle any potential changes to the current timezone and datetime\n  // that might come in from the consumer of the component.\n  // This includes setting the proper timezone, datetime and dispatching the updated values\n  // back up to the consumer\n  $: setTimezone(timezone);\n  $: setDatetime(datetime, timezone);\n  $: utcDatetime && dispatchUpdates();\n\n  // ***** Lifecycle methods *****\n  onMount(() => {\n    setTimezone(timezone);\n    setDatetime(datetime, timezone);\n    scrollToHighlighted();\n  });\n</script>\n\n{#if expanded}\n  <div class=\"overlay\" on:click=\"{reset}\"></div>\n{/if}\n\n<div class=\"tz-container\">\n  <button\n    bind:this=\"{toggleButtonRef}\"\n    type=\"button\"\n    aria-label=\"{`${currentZone} is currently selected. Change timezone`}\"\n    aria-haspopup=\"listbox\"\n    data-toggle=\"true\"\n    aria-expanded=\"{expanded}\"\n    on:click=\"{toggleExpanded}\"\n    on:keydown=\"{toggleExpanded}\"\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 487.015 487.015\"\n      width=\"0.88em\"\n      height=\"0.88em\"\n    >\n      <path\n        d=\"M484.681\n        213.47c-4.498-40.879-19.541-78.226-43.869-111.5-39.194-53.578-91.611-86.336-157.067-97.74-13.051-2.271-26.398-2.862-39.608-4.23h-2.622c-12.342\n        1.351-24.737 2.246-36.993 4.129C78.665 23.442-12.331 142.612 2.056\n        269.395 8.921 329.91 34.27 381.516 79.271 422.673c53.504 48.941 117.062\n        69.925 189.118 63.079 55.301-5.271 103.557-27.573 143.33-66.489\n        57.76-56.561 81.781-125.699 72.962-205.793zM433.4\n        338.072c-6.153-10.729-13.92-25.688-17.39-38.455-5.042-18.537-17.147-.627-18.158\n        11.479s-9.078 21.184-25.221\n        3.025c-16.143-18.157-19.169-14.126-24.211-14.126s-14.121 12.104-12.105\n        68.601c1.437 40.335 17.349 46.736 27.746 49.662-19.305 13.264-41.488\n        23.714-66.385 30.038-95.157\n        24.151-192.289-19.706-237.671-106.837-42.28-81.185-21.681-173.053\n        21.299-223.616 1.156 9.094 2.288 17.263 3.23 25.464 2.562 22.39.629\n        44.487-3.939 66.496-.976 4.69-.636 10.033.629 14.646.688 2.519 4.486\n        5.494 7.11 5.743 2.066.201 5.671-3.074 6.508-5.533 1.513-4.397\n        1.575-9.327 2.04-14.053.334-3.334.34-6.712.57-11.942 3.413 2.766 5.902\n        4.444 7.971 6.525 5.272 5.308 10.604 10.592 15.415 16.299 2.125 2.533\n        4.315 6.079 4.256 9.129-.133 6.525 2.73 10.962 6.227 16.086 3.886 5.698\n        5.636 12.862 8.136 19.459 1.046 2.766 1.265 5.887 2.512 8.547 2.663\n        5.697 6.688 9.599 13.607 10.024 7.279.461 10.004 3.286 11.05\n        10.733-1.862.213-3.715.462-5.574.633-8.878.846-13.278 4.924-12.927\n        13.879.694 17.785 7.11 33.324 20.312 45.678 3.638 3.411 7.503 6.579\n        11.038 10.072 8.074 7.974 10.891 17.342 7.01 28.354-1.859 5.249-4.407\n        10.403-5.231 15.83-.839 5.514-.845 11.508.432 16.904 1.324 5.615.756\n        17.897 6.555 16.881 10.258-1.803 16.154.219\n        16.952-11.266.151-2.188-.018-2.459-.6-4.48-3.05-10.781 10.799-41.387\n        19.109-46.967 7.099-4.776 14.218-9.635 20.652-15.244 9.276-8.062\n        13.429-18.477 9.531-30.605-3.668-11.414.623-19.795 8.603-27.143\n        8.14-7.489 13.477-16.119\n        12.921-27.645-.556-11.526-8.098-19.849-17.927-18.666-4.806.567-9.413\n        2.872-14.098 4.45-6.868 2.323-13.571 5.574-20.62 6.839-9.88\n        1.75-15.968-4.705-20.375-12.543-3.546-6.301-4.714-6.785-10.87-2.86-5.193\n        3.322-10.376 6.667-15.755 9.67-5.588 3.121-8.633\n        1.963-12.941-2.707-2.548-2.755-6.076-4.693-9.351-6.679-2.355-1.442-5.539-1.839-7.427-3.647-2.53-2.447-6.059-6.076-5.701-8.729.417-3.115\n        4.025-7.014 7.172-8.29 5.423-2.199 11.585-2.554 17.401-3.818 3.097-.674\n        6.239-1.375 9.167-2.53 4.008-1.599\n        3.839-4.232.771-6.703-1.513-1.215-3.384-2.069-5.208-2.802-8.866-3.57-17.782-6.984-26.643-10.568-2.202-.884-4.371-1.971-6.348-3.263-5.571-3.661-6.242-7.692-1.188-12.152\n        19.955-17.602 43.264-22.756 63.916.63 6.398 7.243 10.737 16.275 16.778\n        23.876 4.752 5.994 10.223 11.621 16.263 16.246 2.489 1.9 8.086 2.223\n        10.87.697 4.146-2.27 4.291-7.444\n        2.205-11.759-1.803-3.748-3.922-7.442-6.469-10.722-11.733-15.117-10.926-44.576\n        12.055-56.867 7.687-4.117 15.441-8.453 19.112-19.497-4.403 1.191-7.596\n        1.959-10.723 2.917-17.451 5.405-5.302-7.613 2.726-9.883\n        4.876-1.386-4.362-5.122-4.362-5.122.219-.381 6.135-2.069 12.714-4.874\n        4.527-1.924 9.155-4.09 12.915-7.152 2.436-1.998 3.375-5.816\n        4.977-8.819-.407-.473-.804-.934-1.217-1.407-4.611.621-9.216 1.303-13.838\n        1.824-7.832.877-9.67-.659-10.396-8.559-.503-5.394-6-8.334-11.133-5.568-3.473\n        1.883-6.476 4.613-9.818 6.773-7.716 4.998-13.485\n        3-16.512-5.618-1.803-5.13-4.314-6.1-9.034-3.227-2.374 1.442-4.354\n        3.549-6.768 4.897-3.958 2.211-7.982 4.43-12.232 5.932-4.14 1.466-9.126\n        2.53-11.943-2.01-3.026-4.882-.381-9.635 3.435-12.696 4.743-3.807\n        10.211-6.762 15.548-9.753 7.602-4.279 15.652-7.838 22.993-12.504\n        5.388-3.438 7.743-9.041\n        6-15.652-1.472-5.58-5.205-7.468-10.374-4.909-4.268 2.119-7.997\n        5.435-12.386 7.143-3.207 1.229-7.203\n        1.242-10.646.636-1.271-.225-2.622-3.747-2.657-5.792-.024-1.179\n        2.367-3.227 3.892-3.476 10.604-1.652 21.255-3.05 31.921-4.265 1.41-.154\n        3.529.718 4.413 1.844 7.045 8.893 16.875 13.208 27.216 16.287 8.688 2.58\n        9.947 1.351 11.142-7.764 11.159-2.627 22.502-7.803 33.732-.721 6.23\n        3.921 11.91 8.917 17.183 14.091 1.307 1.288.509 5.272-.118 7.838-.827\n        3.448-2.736 6.635-3.617 10.083-1.702 6.682 2.618 11.904 9.522 11.795\n        2.181-.047 4.356-.494 6.549-.603 6.378-.298 8.642 2.143 8.057 8.583-.828\n        9.126.691 10.223 9.9 8.665 2.647-.446 5.704.756 8.405 1.703 1.607.567\n        2.854 2.107 4.285 3.188 8.564 6.49 15.113 4.058\n        17.62-6.561.271-1.156.236-2.391.473-3.559.993-4.764 3.683-5.99\n        6.897-2.604 6.81 7.211 13.199 14.824 20.108 22.686-7.424 6.809-7.672\n        15.084-6.028 23.193 1.826 9.021-.55 16.858-4.108 24.805-3.41 7.613-7.157\n        15.179-9.434 23.144-3.404 11.955.461 17.416 12.602 20.062 11.585 2.529\n        13.482 4.858 13.92 16.184.585 15.448 8.518 26.11 22.071 32.914 3.009\n        1.501 6.206 2.642 9.279 3.919-1.519 23.814-8.317 48.598-19.949 72.111z\"\n      ></path>\n    </svg>\n\n    <span>\n      {currentZone}\n      {#if utcDatetime}\n        ({format(utcDatetime, `'GMT' xxx`, { timeZone: timezone })})\n      {/if}\n    </span>\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 30.727 30.727\"\n      width=\"0.88em\"\n      height=\"0.88em\"\n    >\n      <path\n        d=\"M29.994 10.183L15.363 24.812.733 10.184a2.5 2.5 0\n        113.536-3.536l11.095 11.093L26.461 6.647a2.5 2.5 0 113.533 3.536z\"\n        transform=\"{expanded ? 'rotate(180, 15.3635, 15.3635)' : 'rotate(0)'}\"\n      ></path>\n    </svg>\n  </button>\n  {#if expanded}\n    <div\n      class=\"tz-dropdown\"\n      transition:slide\n      on:introend=\"{scrollToHighlighted}\"\n      on:keydown=\"{keyDown}\"\n    >\n      <label id=\"{labelId}\">\n        Select a timezone from the list. Start typing to filter or use the arrow\n        keys to navigate the list\n      </label>\n      <div class=\"input-group\">\n        <!-- svelte-ignore a11y-autofocus -->\n        <input\n          id=\"{searchInputId}\"\n          bind:this=\"{searchInputRef}\"\n          type=\"search\"\n          aria-autocomplete=\"list\"\n          aria-controls=\"{listBoxId}\"\n          aria-labelledby=\"{labelId}\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"Search...\"\n          bind:value=\"{userSearch}\"\n          autofocus\n        />\n\n        {#if userSearch && userSearch.length > 0}\n          <button\n            bind:this=\"{clearButtonRef}\"\n            title=\"Clear search text\"\n            on:click=\"{clearSearch}\"\n          >\n            <svg width=\"0.88em\" height=\"0.88em\" viewBox=\"0 0 23 23\">\n              <path\n                fill=\"transparent\"\n                strokeWidth=\"3\"\n                stroke=\"hsl(0, 0%, 18%)\"\n                strokeLinecap=\"round\"\n                d=\"M 3 16.5 L 17 2.5\"\n              ></path>\n              <path\n                fill=\"transparent\"\n                strokeWidth=\"3\"\n                stroke=\"hsl(0, 0%, 18%)\"\n                strokeLinecap=\"round\"\n                d=\"M 3 2.5 L 17 16.346\"\n              ></path>\n            </svg>\n\n          </button>\n        {/if}\n      </div>\n\n      <ul\n        tabindex=\"-1\"\n        class=\"tz-groups\"\n        id=\"{listBoxId}\"\n        role=\"listbox\"\n        bind:this=\"{listBoxRef}\"\n        aria-labelledby=\"{labelId}\"\n        aria-activedescendant=\"{currentZone && `tz-${slugify(currentZone)}`}\"\n      >\n        {#each Object.keys(groupedZones) as group}\n          {#if groupHasVisibleChildren(group, filteredZones)}\n            <li role=\"option\" aria-hidden=\"true\">\n              <p>{group}</p>\n            </li>\n            {#each Object.keys(groupedZones[group]) as name}\n              {#if filteredZones.includes(name)}\n                <li\n                  role=\"option\"\n                  tabindex=\"0\"\n                  id=\"{`tz-${slugify(name)}`}\"\n                  bind:this=\"{listBoxOptionRefs[name]}\"\n                  aria-label=\"{`Select ${name}`}\"\n                  aria-selected=\"{highlightedZone === name}\"\n                  on:mouseover=\"{() => setHighlightedZone(name)}\"\n                  on:click=\"{(ev) => handleTimezoneUpdate(ev, name)}\"\n                >\n                  {name}\n                  <span>\n                    {utcDatetime && format(\n                        getTimeForZone(utcDatetime, ungroupedZones[name]),\n                        `'GMT' xxx`,\n                        { timeZone: ungroupedZones[name] }\n                      )}\n                  </span>\n                </li>\n              {/if}\n            {/each}\n          {/if}\n        {/each}\n      </ul>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .overlay {\n    background: transparent;\n    height: 100vh;\n    left: 0;\n    position: fixed;\n    top: 0;\n    width: 100vw;\n    z-index: 0;\n  }\n\n  .tz-container {\n    position: relative;\n    z-index: 1;\n  }\n\n  button {\n    background: transparent;\n    border: 0;\n    cursor: pointer;\n  }\n\n  button[data-toggle] {\n    align-content: flex-start;\n    align-items: center;\n    display: flex;\n  }\n\n  button[data-toggle] > span {\n    color: var(--color-info-900, #076196);\n    margin-left: 0.4em;\n    margin-right: 0.4em;\n    text-decoration: underline;\n  }\n\n  .tz-dropdown {\n    background-color: var(--color-white, #fff);\n    border: 1px solid var(--color-gray-100, rgba(0, 0, 0, 0.2));\n    box-shadow: 0 1px 6px 0 var(--color-gray-100, rgba(0, 0, 0, 0.2));\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    min-width: 18em;\n    max-width: 100vw;\n    position: absolute;\n    z-index: 50;\n  }\n\n  .tz-groups {\n    height: 240px;\n    max-height: 40vh;\n    overflow: scroll;\n  }\n\n  ul {\n    margin: 0;\n    list-style: none inside none;\n    padding: 0;\n  }\n\n  ul li {\n    font-size: 0.9rem;\n    display: block;\n    margin: 0;\n    padding: 0;\n  }\n\n  ul li p {\n    color: var(--color-gray-900, #292929);\n    font-size: 0.92rem;\n    font-weight: 600;\n    letter-spacing: 0.08em;\n    margin: 0;\n    padding: 0;\n    text-transform: uppercase;\n  }\n\n  ul li {\n    background: transparent;\n    border: 0;\n    color: var(--color-gray-600, #757575);\n    display: flex;\n    justify-content: space-between;\n    padding: 0.8em 1.2em;\n    text-align: left;\n  }\n\n  ul li[aria-selected]:hover,\n  ul li:focus,\n  li[aria-selected='true'] {\n    background: var(--color-info-900, #076196);\n    color: #fff;\n    cursor: pointer;\n  }\n\n  .input-group {\n    display: flex;\n    position: relative;\n  }\n\n  .input-group > button {\n    position: absolute;\n    top: 1.2em;\n    right: 0.8em;\n  }\n\n  input {\n    border: 1px solid var(--color-gray-400, #acacac);\n    border-radius: 4px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12);\n    margin: 0.4em;\n    padding: 0.6em 1.6em 0.6em 0.4em;\n    width: calc(100% - 0.8em);\n  }\n\n  label {\n    border: 0;\n    clip: 'rect(0, 0, 0, 0)';\n    height: 1px;\n    margin: -1px;\n    opacity: 0;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}